[{"categories":["个人成长"],"content":"本文介绍了基于Hugo和LoveIt主题搭建个人网站的进阶功能优化方案。主要内容包括： 接入Algolia实现毫秒级站内搜索：通过注册Algolia、配置Hugo密钥，结合GitHub Action自动化同步搜索索引，解决手动更新痛点； 集成Valine无后端评论系统：依托LeanCloud国际版存储评论数据，强调安全域名配置与评论管理； SEO搜索引擎优化：详细说明Google、Bing的收录流程，并揭露国内搜索引擎（如百度）因域名备案限制导致的收录困境； 深度主题美化：通过覆盖CSS样式、注入自定义JavaScript代码（如网站运行时间动态显示），实现个性化界面优化，同时保留主题更新兼容性。 文章以技术实践为主线，兼顾自动化部署与美学设计，为Hugo用户提供一站式功能增强指南。","date":"2022-06-15","objectID":"/build_blog_by_hugo2/","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"前言 之前用Hugo和Github Pages 以及LoveIt主题 搭建好了网站的基本功能与框架，嗯，看起来感觉比较简陋，以及一些网站运作的功能还没有完善好，于是又折腾一番，将剩余比较重要的功能都设置了一下， 然后写了此篇博文进行记录，特别是网站美化，强迫症的我啊，硬是折腾了好久才看起来好看一些😅。 在上一篇【用Hugo和GitHub Pages搭建个人网站】中，我们完成了 Hugo 环境的搭建、LoveIt 主题的安装以及基础配置。本篇将重点介绍以下进阶功能实现： 接入 Algolia 实现毫秒级站内搜索 集成 Valine 无后端评论系统 搜索引擎SEO优化指南 个性化主题美化方案 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:1:0","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"接入 Algolia 站内搜索 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:2:0","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"1. 注册 Algolia 账号 访问 Algolia官网 注册免费账户，进入控制台： 创建 Hugo-Search 应用 新建 hugo_blogs 索引 记录 Application ID、Search-Only API Key、Admin API Key Algolia 还是比较良心的，免费用户每个月赠送100w条记录储存空间，1w次搜索请求，这对于咱这小网站来说应该绰绰有余了吧哈哈😄 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:2:1","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"2. 上传本地搜索分片JSON文件 在Algolia索引控制台 Index \u003e Add records \u003e Upload file 菜单下上传Hugo生成的index.json文件，这个文件在哪里呢？ 他在生成的public文件夹下，每次网站构建都会重新生成，他会把你网站里content文件夹下面的文件内容进行分片，以便进行索引。 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:2:2","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"3. 修改 hugo.toml 配置文件 找到主配置文件中搜索配置的位置，填写之前记录的相关密钥 [params.search.algolia] index = \"你的 Algolia 索引名称\" appID = \"你的 Application ID\" searchKey = \"你的 Search-Only API Key\" 其他配置项看个人喜好配置。接下来直接hugo serve本地启动测试一下搜索效果吧 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:2:3","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"4. 索引文件index.json同步 Algolia 流程自动化 前三步其实已经实现了搜索功能了，但是我们现在网站也没有多少文章，后面肯定还会进行添加文章的，要是每次都要手动的去上传index.json文件，那该多麻烦呢。 好在Algolia为咱们提供了插件自动同步的功能：atomic-algolia插件，我们可以利用Github action流水线将之集成进去，可以实现每次网站构建时自动同步索引。 在我们的Github action配置文件中在build 和 Deploy步骤中间 添加下面步骤： - name: Set up Node.js uses: actions/setup-node@v3 with: node-version: 16 - name: Install atomic-algolia run: npm install -g atomic-algolia - name: Upload to Algolia working-directory: public # 进入public目录 run: atomic-algolia index.json # 上传处理后的文件 env: ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }} ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_API_KEY }} ALGOLIA_INDEX_NAME: kun-blog-index # 填写你的Algolia索引名称 ALGOLIA_INDEX_FILE: index.json 解释一下上面的配置：atomic-algolia 是基于Node.js的，需要node环境，所以在流水线中需要先安装node，然后通过npm命令安装atomic-algolia，之后再执行上传操作 env配置下需要填写appid和admin_key，注意这里需要的是admin_key而不是之前填写的Search-Only API Key。可以在Github仓库的 Settings \u003e Secrets \u003e Actions配置变量，token的命名分别定为 ALGOLIA_APP_ID和ALGOLIA_API_KEY ，之后就进行测试一下，见证奇迹的时刻吧！！！解放双手了有木有？ atomic-algolia 是可以同步删除动作的，也就是说如果你删除了一篇博文，也是可以同步给Algolia的，这就避免了咱们本地没有文章，搜索却能搜出来的尴尬场面😅 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:2:4","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"接入 Valine 站内评论 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:3:0","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"1. 注册 LeanCloud 国际版 访问 LeanCloud 完成注册： 创建新应用 Blog-Comment 进入「设置」-「应用凭证」记录 App ID 和 App Key ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:3:1","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"2. 修改主题配置 [params.page.comment.valine] enable = true appId = \"Your-LeanCloud-App-ID\" appKey = \"Your-LeanCloud-App-Key\" placeholder = \"留下您的思考痕迹...\" avatar = \"retro\" pageSize = 10 serverURLs = \"\" # 此项需要置空，国内版如果是自定义域名的话需要先绑定域名，再填写到这里 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:3:2","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"3. 安全配置（重要！） 在 LeanCloud 控制台： 进入「设置」-「安全中心」 添加 Web 安全域名：https://jk5555.github.io （# 填写自己的网址） 启用「验证码服务」 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:3:3","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"4. 评论管理 访问 控制台 \u003e 存储 \u003e Comment 可管理用户评论，建议开启邮件通知功能。 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:3:4","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"接入 谷歌、必应等搜索引擎SEO ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:4:0","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"谷歌搜索收录 登录 Google Search Console 选择「网址前缀」验证方式，下载 HTML 验证文件 将文件放入 static 目录，自动部署到根目录 提交站点地图：https://jk5555.github.io/sitemap.xml （# 填写自己的网址） 站点地图文件是hugo构建网站时自动生成在public根目录下，用于记录此网站包含的搜有页面url 帮助搜索引擎更快收录 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:4:1","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"必应收录 访问 Bing Webmaster Tools 下载 HTML 验证文件，将文件放入 static 目录，自动部署到根目录 提交站点地图：https://jk5555.github.io/sitemap.xml （# 填写自己的网址） ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:4:2","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"国内的搜索引擎收录 国内的搜索引擎限制较多，拿百度来说，想要收录需要购买自定义域名，.github.io 域名由于注册过多而限制SEO了，， 原本说我也整个自己的域名玩玩，，结果比较坑爹，，买了域名之后需要备案，，备案要花100块左右，但这不是重点，，备案的前提是你需要有还没有过期的ECS（云服务器），且过期时间 在3个月以上才行，，，也就是说我想被百度SEO，我就得买域名，还得买云服务器，然后再花钱备案，备案流程还得走一个月左右 ，，，坑爹，实在是太坑爹了😓，因此，放弃了百度SEO。 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:4:3","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"网站美化 网站美化主要包括css样式美化和js功能优化；能实现美化效果主要是得益于hugo的加载特性：他会先加载根目录下的文件，然后再加载主题中的文件， 因此，想要修改loveIt主题中的相关页面时，我们将之复制到自己项目中的同名目录下，再进行修改 你也可以直接在主题的文件中修改，但是不建议，因为后面主题更新之后，我们的改动就没了。 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:5:0","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"css样式美化 LoveIt支持自定义css样式覆盖或者补充预设的css样式，我们在项目下创建assets/css/_override.scss 文件，在这个文件中定义的css样式会优先于预设样式加载 ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:5:1","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"js样式美化 首先 在项目的static目录下创建js/custom.js文件，然后复制themes/LoveIt/layouts/partials/assets.html到项目的同名目录下，打开此文件，划到结尾 ，在最后一行{{- partial \"plugin/analytics.html\" . -}}上方插入我们的自定义js标签：\u003cscript type=\"text/javascript\" src=\"/js/custom.js\"\u003e\u003c/script\u003e，之后我们的/custom.js代码会在页面加载中生效 我在js文件中添加了网站运行时间的功能，代码如下: function runtime() { window.setTimeout(\"runtime()\", 1000); /* 请修把这里的建站时间换为你自己的 */ let startTime = new Date('02/23/2022 08:00:00'); let endTime = new Date(); let usedTime = endTime - startTime; let days = Math.floor(usedTime / (24 * 3600 * 1000)); let leavel = usedTime % (24 * 3600 * 1000); let hours = Math.floor(leavel / (3600 * 1000)); let leavel2 = leavel % (3600 * 1000); let minutes = Math.floor(leavel2 / (60 * 1000)); let leavel3 = leavel2 % (60 * 1000); let seconds = Math.floor(leavel3 / (1000)); let runbox = document.getElementById('run-time'); runbox.innerHTML = '本站已运行\u003ci class=\"far fa-clock fa-fw\"\u003e\u003c/i\u003e ' + ((days \u003c 10) ? '0' : '') + days + ' 天 ' + ((hours \u003c 10) ? '0' : '') + hours + ' 时 ' + ((minutes \u003c 10) ? '0' : '') + minutes + ' 分 ' + ((seconds \u003c 10) ? '0' : '') + seconds + ' 秒 '; } runtime(); 但是如果想生效，我们还得干一件事：复制themes/LoveIt/layouts/partials/footer.html到项目的同名目录下，然后在\u003cdiv class=\"footer-container\"\u003e 标签下面添加：\u003cdiv class=\"footer-line\"\u003e\u003cspan id=\"run-time\"\u003e\u003c/span\u003e\u003c/div\u003e ","date":"2022-06-15","objectID":"/build_blog_by_hugo2/:5:2","tags":["Hugo","LoveIt"],"title":"建站后续：Hugo + LoveIt 主题建站增强","uri":"/build_blog_by_hugo2/"},{"categories":["个人成长"],"content":"本文详细记录了使用 Hugo 静态网站生成器和 GitHub Pages 免费搭建个人博客的全过程。涵盖 Hugo 安装、主题配置、GitHub Pages 仓库创建、自动化部署流水线搭建，以及本地调试技巧。通过 GitHub Action 实现「源码推送 → 自动构建 → 静态页面发布」的完整 CI/CD 流程，无需服务器即可拥有高性能个人网站。","date":"2022-03-10","objectID":"/build_blog_by_hugo/","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"前言 一直想搭个个人网站，但是服务器贵啊，还要买域名啥的，但是GitHub Pages功能真是我等个人开发者的福音，可以利用GitHub的域名部署一个静态网站， 相当于可以白嫖一个服务器，用来记录一些博客文章，个人分享啥的还是不错的。言归正传，静态网站生成器比较火的有Hugo、Jekyll、Gatsby等等， 试用了一下，最后选择了Hugo，其他的安装啊 环境啊，发布部署啥的都比较麻烦，Hugo最简便，Go语言开发的，部署速度特别快，配置文件，命令使用也都很简洁 折腾一天就弄好了，并整理了这边文章记录一下。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:1:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"安装Hugo ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:2:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"macOS安装Hugo Homebrew 是一个 macOS 的软件包管理器，可以从 brew.sh 安装。命令如下： # 使用 Homebrew 进行安装 brew install hugo # 验证是否安装成功安装 hugo version ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:2:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"Windows11安装Hugo 按 Win + R，输入 cmd，打开命令提示符窗口。输入命令： # 直接下载安装 winget install Hugo.Hugo.Extended # 验证是否安装成功安装 hugo version ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:2:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"创建博客站点项目仓库 接下来需要创建一个站点空项目，名字尽量取成xxx-source形式，或者xxx-blog也行，主要是这个会成为博客网站 的源代码仓库 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"生成站点项目仓库 hugo new site kun-blog cd kun-blog ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"Git仓库初始化和选择主题 我喜欢简洁干净的主题，LoveIt这款挺好的，还有很多主题可以在 Hugo Themes 选择，最好是网上搜一下Hugo主题推荐，可以找到好用好看的主题 # git初始化仓库 git init # 将LoveIt作为仓库子模块clone git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 如果不想 LoveIt 随版本更新，也可以下载主题的 发布版本.zip 文件 并且解压放到 themes 目录. ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"配置文件初始化 把主题目录下的themes/LoveIt/archetypes/default.md文件复制替换到项目文件夹下的archetypes/下面，这个文件是日后创建文章时要用到的模版； 把主题目录下的themes/LoveIt/exampleSite/hugo.toml文件复制替换掉项目文件夹下的hugo.toml配置文件，这个文件是网站的整体设置，里面的一些配置项后面会说到。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:3","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"本地仓库关联Github远程仓库 在 GitHub 上创建新仓库，仓库名尽量和此项目名保持一致 # 关联远程仓库 git remote add origin https://github.com/jk5555/kunblog.git # 改为具体的仓库clone地址 git push -u origin master ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:4","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"创建GitHub Pages仓库 接下来需要在GitHub上创建GitHub Pages仓库，这个是用来承接构建好的静态网站文件的，并且可以通过域名访问。 如图所示，只需要创建一个仓库，命名格式为username.github.io，这个username是Github账户名称，我这里已经创建了一个，所以不能重复创建了，我的GitHub账户名称为jk5555， 之后我的GitHub Pages网站就可以通过 https://jk5555.github.io 来访问。这里创建好仓库就可以不用管它了。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:4:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"配置GitHub Action流水线 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:5:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"添加GitHub Action配置文件 在项目根文件夹下创建.github/workflows/gh-pages.yml配置文件，内容如下： name: GitHub Pages on: push: branches: - master # 填写需要被构建推送的分支名 pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout code uses: actions/checkout@v4 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: '0.145.0' # 改为本地Hugo的版本号，防止兼容性问题 extended: true # 是否启用hugo extended working-directory: . # 填写要构建的项目目录，我这里就是项目根文件夹 - name: Build run: hugo --minify working-directory: . # 填写要构建的项目目录，我这里就是项目根文件夹 - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == 'refs/heads/master' # 意思是如果构建的是master分支，则执行后面的推送过程 with: PERSONAL_TOKEN: ${{secrets.ACTION_TOKEN}} # 这个是访问密钥，在GitHub账户里配置好即可 PUBLISH_DIR: ./public # 推送目录 EXTERNAL_REPOSITORY: jk5555/jk5555.github.io # Github Pages远程仓库名 PUBLISH_BRANCH: master # 推送到目标仓库的分支 # force_orphan: true # 强制清空目标分支历史（可选） ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:5:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"创建ACTION_TOKEN密钥 GitHub Action流水线在执行推送任务时需要得到仓库的访问授权，这个token在账户设置的 Personal access tokens 这里配置 记得一定要勾选repo和workflow权限，创建成功之后复制好token，打开GitHub Action流水线所在项目的环境变量设置添加仓库变量：进入仓库的 Settings \u003e Secrets \u003e Actions，token的命名定为 ACTION_TOKEN，这样上面添加的配置文件就能生效了。 后面只需要push博客项目仓库的文件，就能实现线上自动构建发布，速度很快。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:5:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"本地调试或线上预览 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"hugo.toml配置文件说明 这个其实配置文件里面已经有很详细的说明了，还可以看看官方的配置文档 配置说明 。 我这里提一下部分参数： baseURL = \"https://jk5555.github.io\" # 这个填写网站地址 # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"https://github.com/jk5555/kun-blog\" #这个填写当前仓库的git地址，用处是可以在文章的末尾展示GitHub的变更记录，需要配合后面的开关配置使用 # 是否使用 git 信息 enableGitInfo = true # 结合上面的 gitRepo 配置，控制是否展示文章的git提交记录 # 日期格式 dateFormat = \"2006-01-02\" # 这个就固定填2006-01-02，别改，改了时间展示就乱码，应该是主题作者的bug ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"default.md文件说明 前面说的复制的default.md这个文件是文章的配置模版，通过此模版创建文章时能继承一些预设置，比较方便； 复制过来的模版大部分都不用动，值得注意的是： 文章的摘要部分可以通过description参数配置，但是有一个\u003c!--more--\u003e分隔符，在这个分隔符之前的文本会被定义为文章摘要，他的优先级比description高。 featuredImage和featuredImagePreview两个参数是用来设置文章封面图的，featuredImage参数展示在文章头部，featuredImagePreview展示在文章外部；建议图片分辨率在1000x300左右，不然可能会被自动截取。 draft参数，有两个值：true和false，为true时表示文章为草稿，不会在页面上展示，为false时才会展示。 tags: [] 和 categories: [] 参数用来给文章打标签和分类，然后就能在标签和分类菜单栏看到分类好的文章了，这个是主题自动支持的功能。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"文章存放目录 文章的存放目录为项目根文件夹下的content/posts，实际上content目录就是用来存放文章的，下面的一级目录名称与菜单配置名称对应，这个在项目配置文件里面配置。 之后只需要往这里添加md格式的文章即可。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:3","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"本地启动 基于文章模板来创建文章 hugo new posts/first_post.md 图标库 LoveIt 主题使用 Font Awesome 作为图标库. 我们可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! ：(fas fa-campground fa-fw)： 很快就回来. 真开心! ：(far fa-grin-tears)： 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! 本地启动 hugo serve 去查看 http://localhost:1313 修改文章时，页面会自动实时刷新。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:4","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"线上预览 当本地修改好了之后，就可以git push 到远程仓库了，记得修改文章设置参数draft，置为false。 推送完毕后，Github Action 会自动构建并发布，大约等个几秒钟就可以在线上看到了！ ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:5","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"其他辅助性工具或文档 loveit 主题 相关语法，配置帮助文档查看：主题文档 - 内容 md基础语法：Markdown 基本语法 LoveIt内置支持的icon图标网站：Font Awesome ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:7:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"TODO事项 至此一个博客网站基本搭建完成，但是还有一些事情需要去做。比如：站内搜索，评论系统，SEO，站点信息统计 等等。这些优先级可以放缓，先把内容做好，差不多了时候再去接入。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:8:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"}]