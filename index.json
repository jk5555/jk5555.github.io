[{"categories":["Test"],"content":"水水水水水水水水水水水水水水水水水水水","date":"2025-03-08","objectID":"/baby/first/","tags":["Test"],"title":"测试标题","uri":"/baby/first/"},{"categories":["Test"],"content":"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1s s s s s s s s s s s s ss s s s s s s s s s s sw 1 2 3 4 5 6 7 8 用于 Hugo 输出文档的设置 [outputs] home = [“HTML”, “RSS”, “JSON”] page = [“HTML”] # 如果都想输出，则设置为[“HTML”, “MarkDown”]，页面底部有\"查看网页原文\" section = [“HTML”, “RSS”] taxonomy = [“HTML”, “RSS”] taxonomyTerm = [“HTML”] 我个人是倾向不输出，所以删去了“MarkDown”字段。 文章摘要 文章摘要是用简短的一句话，对标题进行补充解释，让读者在看文章之前就对文章有个大体的印象。 详细设置部分，可参考官方文档-摘要部分 。 我选择的手动摘要，做以下步骤： 在archetypes/default.md文本内新增description字段，以描述为摘要； 新增摘要分隔符＂＂；（可参考本文default内容模板章节） 比如本篇文章的摘要设置如下： 1 description: “摘要：LoveIt主题从Github模板到个性化所需要做的重要配置” 这样每篇新建的文章只要填写description字段内容即可，注意，使用纯文本，不要加入代码块、字体加粗格式等富文本，容易引起渲染错误。 文章封面图 LoveIt主题让使用者选择是否设置文章预览图，如果想设置，在markdown文档的最开头的配置部分，填写featuredImage字段，引用的图片可以是网络URL地址的图片，也可以是本博客本地图片。 我选择的是本地图片的static方式加载(还有asset方式)，资源相对路径的起始位置是根目录下的static目录，比如本文的图片目录是static/img/Chore-Pic/LoveIt-Theme.webp，那么这个字段应该填写： 1 featuredImage: “/img/Chore-Pic/LoveIt-Theme.webp” 🤔图片的分辨率建议是1000x300或者长宽比相近的分辨率，可以避免预览被裁剪。 图片格式尽量选择webp格式(或使用ffmpeg等工具将其他图片格式转换为webp)。 webp格式的图是新一代的压缩格式，保证最大原图清晰度的情况下，尽可能地缩小了图片内存占用，加快加载速度。 Algolia站内搜索 Algolia是法国的初创公司，类似于存储云服务，计算云服务，提供的是搜索云服务，用户建立应用，接着通过sdk推送数据，然后通过sdk就可以搜索了。个人用户是免费使用，还有个最大的优点是速度快，比LoveIt主题支持的默认站内搜索工具lunar.js快了一个数量级。 按照以下步骤实施即可： 在Algolia官网注册账号后登录，或使用 GitHub、Google 帐号登录； 点击左侧边栏的OverView/dashboard，可以看到自动创建了一个App，可以重新命名，我们新建一个Index，比如命名为My_Blog，点击进去，准备上传index.json作为搜索元数据。 Algolia 为我们提供了三种方式来增加记录：手动添加、上传 json 文件、API自动添加。下面演示自动添加的方式： 生成index.json并上传： 每次更新博客内容并发布时，需要更新index.json，可以做到自动化脚本化，借助第三方工具Atomic-Algolia即可。安装方法： 安装node.js后，可以执行npm指令； 执行 npm install atomic-algolia，可以安装 atomic-algolia； 在hugo根目录修改或新建文件 package.json ，添加如下内容： 1 2 3 4 5 6 { “scripts”: { “test”: “echo \"Error: no test specified\" \u0026\u0026 exit 1”, “algolia”: “atomic-algolia” } } 根目录下新建.env文件,添加如下内容： 1 2 3 4 ALGOLIA_APP_ID=你的Application ID ALGOLIA_INDEX_NAME=你的algolia-index名字 ALGOLIA_INDEX_FILE=public/index.json ALGOLIA_ADMIN_KEY=你的Admin API Key 上述的关键信息 Application ID 和 Admin API Key可以在algolia的DashBoard页面获取，“API Keys”按钮，点进去后，就能看到，前者是大概10位长度的大写英文与数字，后者大概30位的小写英文与数字。 Index的名字是自己重命名的，index-file的路径指的是你的发布路径和Hugo根目录的相对位置，上述示例是public为发布目录。 ⚠️ ALGOLIA_ADMIN_KEY可以用来管理你的索引，所以最好不要提交到公共仓库。 我的做法是Hugo博客内容为Private仓库，发布的仓库kissingfire123.github.io为public，添加为Private仓库的submodule，一来隔离了隐私数据，二来避免每次更新草稿内容都触发page-deploy。 配置config.toml 找到 [params.search]模块，至少配置以下几个值(以下略去其他内容)： 1 2 3 4 5 6 7 8 [params.search] enable = true 搜索引擎的类型 (“lunr”, “algolia”) type = “algolia” [params.search.algolia] index = “Benjamin-Blog” # index-name,这个的确是我的，个人自行命名 appID = “B45S568G91” # app-id，内容我随意写的 searchKey = “c00000d11111e22222f444e2333”#admin-key，内容此处为演示，随意写的 更新索引并自动上传：npm run algolia 输出类似如下内容，“Benjamin-Blog\"是我的index-name。 1 2 3 4 5 6 7 8 9 10 $ npm run algolia algolia atomic-algolia [Algolia] Adding 0 hits to Benjamin-Blog [Algolia] Updating 0 hits to Benjamin-Blog [Algolia] Removing 0 hits from Benjamin-Blog [Algolia] 219 hits unchanged in Benjamin-Blog {} 至此，algolia功能启用成功，使用示范如下： 评论系统Valine LoveIt主题支持多种评论系统，例如Disqus，GitTalk，valine，前2者都需要用户登录后评论且数据托管更方便，valine不需要登录且无后端。 关于valine更详细的介绍，有兴趣的朋友可以看看valine中文文档。 下面只说如何在LoveIt主题上用起来这个评论系统： valine基于LeanCloud登录，注册并登录； 选择国际版，不要选择华北或华东，后面这2个要上传身份证备案的，比较麻烦。(Ps：第一次我就不清楚情况，弄的华北版，各种麻烦，实名认证) 新建应用，比如我的是 Benjamin-Personal-Blog ,然后获取2个关键信息：AppID 和 AppKey。 这2个关键信息在侧边栏设置==\u003e sd s s 1 1 1 1 1 1 1 1 ","date":"2025-03-08","objectID":"/baby/first/:0:0","tags":["Test"],"title":"测试标题","uri":"/baby/first/"},{"categories":["个人成长"],"content":"本文详细记录了使用 Hugo 静态网站生成器和 GitHub Pages 免费搭建个人博客的全过程。涵盖 Hugo 安装、主题配置、GitHub Pages 仓库创建、自动化部署流水线搭建，以及本地调试技巧。通过 GitHub Action 实现「源码推送 → 自动构建 → 静态页面发布」的完整 CI/CD 流程，无需服务器即可拥有高性能个人网站。","date":"2022-03-10","objectID":"/build_blog_by_hugo/","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"前言 一直想搭个个人网站，但是服务器贵啊，还要买域名啥的，但是GitHub Pages功能真是我等个人开发者的福音，可以利用GitHub的域名部署一个静态网站， 相当于可以白嫖一个服务器，用来记录一些博客文章，个人分享啥的还是不错的。言归正传，静态网站生成器比较火的有Hugo、Jekyll、Gatsby等等， 试用了一下，最后选择了Hugo，其他的安装啊 环境啊，发布部署啥的都比较麻烦，Hugo最简便，Go语言开发的，部署速度特别快，配置文件，命令使用也都很简洁 折腾一天就弄好了，并整理了这边文章记录一下。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:1:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"安装Hugo ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:2:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"macOS安装Hugo Homebrew 是一个 macOS 的软件包管理器，可以从 brew.sh 安装。命令如下： # 使用 Homebrew 进行安装 brew install hugo # 验证是否安装成功安装 hugo version ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:2:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"Windows11安装Hugo 按 Win + R，输入 cmd，打开命令提示符窗口。输入命令： # 直接下载安装 winget install Hugo.Hugo.Extended # 验证是否安装成功安装 hugo version ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:2:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"创建博客站点项目仓库 接下来需要创建一个站点空项目，名字尽量取成xxx-source形式，或者xxx-blog也行，主要是这个会成为博客网站 的源代码仓库 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"生成站点项目仓库 hugo new site kun-blog cd kun-blog ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"Git仓库初始化和选择主题 我喜欢简洁干净的主题，LoveIt这款挺好的，还有很多主题可以在 Hugo Themes 选择，最好是网上搜一下Hugo主题推荐，可以找到好用好看的主题 # git初始化仓库 git init # 将LoveIt作为仓库子模块clone git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 如果不想 LoveIt 随版本更新，也可以下载主题的 发布版本.zip 文件 并且解压放到 themes 目录. ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"配置文件初始化 把主题目录下的themes/LoveIt/archetypes/default.md文件复制替换到项目文件夹下的archetypes/下面，这个文件是日后创建文章时要用到的模版； 把主题目录下的themes/LoveIt/exampleSite/hugo.toml文件复制替换掉项目文件夹下的hugo.toml配置文件，这个文件是网站的整体设置，里面的一些配置项后面会说到。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:3","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"本地仓库关联Github远程仓库 在 GitHub 上创建新仓库，仓库名尽量和此项目名保持一致 # 关联远程仓库 git remote add origin https://github.com/jk5555/kunblog.git # 改为具体的仓库clone地址 git push -u origin master ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:3:4","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"创建GitHub Pages仓库 接下来需要在GitHub上创建GitHub Pages仓库，这个是用来承接构建好的静态网站文件的，并且可以通过域名访问。 如图所示，只需要创建一个仓库，命名格式为username.github.io，这个username是Github账户名称，我这里已经创建了一个，所以不能重复创建了，我的GitHub账户名称为jk5555， 之后我的GitHub Pages网站就可以通过 https://jk5555.github.io 来访问。这里创建好仓库就可以不用管它了。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:4:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"配置GitHub Action流水线 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:5:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"添加GitHub Action配置文件 在项目根文件夹下创建.github/workflows/gh-pages.yml配置文件，内容如下： name: GitHub Pages on: push: branches: - master # 填写需要被构建推送的分支名 pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout code uses: actions/checkout@v4 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: '0.145.0' # 改为本地Hugo的版本号，防止兼容性问题 extended: true # 是否启用hugo extended working-directory: . # 填写要构建的项目目录，我这里就是项目根文件夹 - name: Build run: hugo --minify working-directory: . # 填写要构建的项目目录，我这里就是项目根文件夹 - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == 'refs/heads/master' # 意思是如果构建的是master分支，则执行后面的推送过程 with: PERSONAL_TOKEN: ${{secrets.ACTION_TOKEN}} # 这个是访问密钥，在GitHub账户里配置好即可 PUBLISH_DIR: ./public # 推送目录 EXTERNAL_REPOSITORY: jk5555/jk5555.github.io # Github Pages远程仓库名 PUBLISH_BRANCH: master # 推送到目标仓库的分支 # force_orphan: true # 强制清空目标分支历史（可选） ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:5:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"创建ACTION_TOKEN密钥 GitHub Action流水线在执行推送任务时需要得到仓库的访问授权，这个token在账户设置的 Personal access tokens 这里配置 记得一定要勾选repo和workflow权限，token的命名定为 ACTION_TOKEN，这样上面添加的配置文件就能生效了。 后面只需要push博客项目仓库的文件，就能实现线上自动构建发布，速度很快。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:5:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"本地调试或线上预览 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"hugo.toml配置文件说明 这个其实配置文件里面已经有很详细的说明了，还可以看看官方的配置文档 配置说明 。 我这里提一下部分参数： baseURL = \"https://jk5555.github.io\" # 这个填写网站地址 # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"https://github.com/jk5555/kun-blog\" #这个填写当前仓库的git地址，用处是可以在文章的末尾展示GitHub的变更记录，需要配合后面的开关配置使用 # 是否使用 git 信息 enableGitInfo = true # 结合上面的 gitRepo 配置，控制是否展示文章的git提交记录 # 日期格式 dateFormat = \"2006-01-02\" # 这个就固定填2006-01-02，别改，改了时间展示就乱码，应该是主题作者的bug ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:1","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"default.md文件说明 前面说的复制的default.md这个文件是文章的配置模版，通过此模版创建文章时能继承一些预设置，比较方便； 复制过来的模版大部分都不用动，值得注意的是： 文章的摘要部分可以通过description参数配置，但是有一个\u003c!--more--\u003e分隔符，在这个分隔符之前的文本会被定义为文章摘要，他的优先级比description高。 featuredImage和featuredImagePreview两个参数是用来设置文章封面图的，featuredImage参数展示在文章头部，featuredImagePreview展示在文章外部；建议图片分辨率在1000x300左右，不然可能会被自动截取。 draft参数，有两个值：true和false，为true时表示文章为草稿，不会在页面上展示，为false时才会展示。 tags: [] 和 categories: [] 参数用来给文章打标签和分类，然后就能在标签和分类菜单栏看到分类好的文章了，这个是主题自动支持的功能。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:2","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"文章存放目录 文章的存放目录为项目根文件夹下的content/posts，实际上content目录就是用来存放文章的，下面的一级目录名称与菜单配置名称对应，这个在项目配置文件里面配置。 之后只需要往这里添加md格式的文章即可。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:3","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"本地启动 基于文章模板来创建文章 hugo new posts/first_post.md 图标库 LoveIt 主题使用 Font Awesome 作为图标库. 我们可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! ：(fas fa-campground fa-fw)： 很快就回来. 真开心! ：(far fa-grin-tears)： 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! 本地启动 hugo serve 去查看 http://localhost:1313 修改文章时，页面会自动实时刷新。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:4","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"线上预览 当本地修改好了之后，就可以git push 到远程仓库了，记得修改文章设置参数draft，置为false。 推送完毕后，Github Action 会自动构建并发布，大约等个几秒钟就可以在线上看到了！ ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:6:5","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"其他辅助性工具或文档 loveit 主题 相关语法，配置帮助文档查看：主题文档 - 内容 md基础语法：Markdown 基本语法 LoveIt内置支持的icon图标网站：Font Awesome ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:7:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"},{"categories":["个人成长"],"content":"TODO事项 至此一个博客网站基本搭建完成，但是还有一些事情需要去做。比如：站内搜索，评论系统，SEO，站点信息统计 等等。这些优先级可以放缓，先把内容做好，差不多了时候再去接入。 ","date":"2022-03-10","objectID":"/build_blog_by_hugo/:8:0","tags":["建站","Hugo","GitHub Pages"],"title":"用Hugo和GitHub Pages搭建个人网站","uri":"/build_blog_by_hugo/"}]